using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AssessmentApp
{
    internal class Triangle : Shape
    {
        static int DeafultSide = 30;
        internal int Side { get; set; }

        /// <summary>
        ///     The triangle object that is created as a template for future
        ///     triangle to created in line with.
        /// </summary>
        /// <param name="colour"></param>
        /// <param name="x"></param>
        /// <param name="y"></param>
        /// <param name="side"></param>
        public Triangle(Color color, int x, int y, int side) : base(color, x, y)
        {
            this.color = color;
            this.Side = side;
        }

        /// <summary>
        ///     Draw command for the triangle shape class.
        ///     If no size peramiters are specified, the outline of a deafult 
        ///     sized equilateral triangle will be drawn at the given 
        ///     coordiantes. If no coordinates are specified it will be drawn
        ///     at the last saved value of x and y, if these have not been set
        ///     yet they will automatically be 0, 0.
        ///     If the side length is given, the triangle will be drawn 
        ///     using the given side lenght rather than the deafult.
        ///     
        ///     The method of assigning the three points for the triangle was 
        ///     based of code generated by ChatGPT
        /// </summary>
        /// <param name="graphics"></param>
        public override void Draw(Graphics graphics)
        {
            GraphicsHandler graphicsHandler = new GraphicsHandler();
            Pen p = new Pen(graphicsHandler.color, 2);
            if (Side == 0)
            {
                Point vertex1 = new Point(x, y - DeafultSide);
                Point vertex2 = new Point(x - (int)(DeafultSide * Math.Sqrt(3) / 2), y + DeafultSide / 2);
                Point vertex3 = new Point(x + (int)(DeafultSide * Math.Sqrt(3) / 2), y + DeafultSide / 2);

                graphics.DrawLine(p, vertex1, vertex2);
                graphics.DrawLine(p, vertex2, vertex3);
                graphics.DrawLine(p, vertex3, vertex1);
            }
            else
            {
                Point vertex1 = new Point(x, y - Side);
                Point vertex2 = new Point(x - (int)(Side * Math.Sqrt(3) / 2), y + Side / 2);
                Point vertex3 = new Point(x + (int)(Side * Math.Sqrt(3) / 2), y + Side / 2);

                graphics.DrawLine(p, vertex1, vertex2);
                graphics.DrawLine(p, vertex2, vertex3);
                graphics.DrawLine(p, vertex3, vertex1);
            }
        }

        /// <summary>
        ///     This method will remain unimplemented for the time beingdue to 
        ///     the difficulty of draw a solid filled triangle.
        /// </summary>
        /// <param name="graphics"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Fill(Graphics graphics)
        {
            throw new NotImplementedException();
        }
    }
}
